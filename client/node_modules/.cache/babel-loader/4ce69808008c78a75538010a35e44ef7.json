{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\projects\\\\React\\\\login-demo\\\\client\\\\src\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"./axios/config\";\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\nconst AuthContext = /*#__PURE__*/createContext();\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n  let isRefreshing = false;\n  let failedQueue = [];\n\n  const processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n      if (error) {\n        prom.reject(error);\n      } else {\n        prom.resolve(token);\n      }\n    });\n    failedQueue = [];\n  };\n\n  const refreshToken = () => {\n    axios.post(\"/refresh_token\").then(response => {\n      const newToken = response.data.token;\n      setToken(newToken);\n      console.log(`NEW FUCKING TOKEN : ${newToken}`);\n      return response;\n    }).catch(err => {\n      return err;\n    });\n  };\n\n  axios.interceptors.response.use(response => {\n    return response;\n  }, async function (error) {\n    setLoading(true);\n    const originalRequest = error.config;\n    console.log(\"ori request \" + error.config);\n    console.log(error.response.status);\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      if (isRefreshing) {\n        return new Promise(function (resolve, reject) {\n          failedQueue.push({\n            resolve,\n            reject\n          });\n        }).then(token => {\n          console.log(\"Intercept token: \" + token);\n          originalRequest.headers[\"x-access-token\"] = token;\n          setLoading(false);\n          return axios.request(originalRequest);\n        }).catch(err => {\n          setLoading(false);\n          return Promise.reject(err);\n        });\n      }\n\n      originalRequest._retry = true;\n      isRefreshing = true;\n      return new Promise((resolve, reject) => {\n        refreshToken().then(tokenRefreshResponse => {\n          console.log(\"OI\" + tokenRefreshResponse);\n          const newToken = tokenRefreshResponse.data.token;\n          setToken(newToken);\n          console.log(`NEW FUCKING TOKEN : ${newToken}`);\n          originalRequest.headers[\"x-access-token\"] = newToken;\n          processQueue(null, tokenRefreshResponse.data.token);\n          setLoading(false);\n          resolve(axios(originalRequest));\n        }).catch(err => {\n          processQueue(err, null);\n          reject(err);\n        }).then(() => {\n          isRefreshing = false;\n        });\n      });\n    }\n\n    setLoading(false);\n    return Promise.reject(error);\n  }); // const refreshAuthLogic = (failedRequest) => {\n  //   console.log(\"INTERCEPRTTT\");\n  //   return axios\n  //     .post(\"http://localhost:5000/api/refresh_token\")\n  //     .then((tokenRefreshResponse) => {\n  //       setToken(tokenRefreshResponse.data.token);\n  //       console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\n  //       failedRequest.response.config.headers[\"x-access-token\"] =\n  //         tokenRefreshResponse.data.token;\n  //       return Promise.resolve();\n  //     });\n  // };\n  // createAuthRefreshInterceptor(axios, refreshAuthLogic);\n\n  const getUser = () => {\n    console.log(\"call get user1\");\n    axios.get(\"/userInfo\", {\n      headers: {\n        \"x-access-token\": token\n      }\n    }).then(response => {\n      console.log(\"call get user2\");\n      console.log(response);\n\n      if (response.data.auth) {\n        setCurrentUser(response.data.user);\n        setToken(response.data.token);\n      } else {\n        if (response.data.message === \"Authentication failed\") {//setToken();\n        }\n      }\n\n      setLoading(false);\n    }).catch(e => {\n      console.log(e); //setToken();\n      //window.location.reload();\n    });\n  };\n\n  const login = (username, password) => {\n    axios.post(\"/login\", {\n      username: username,\n      password: password\n    }).then(res => {\n      console.log(res.data);\n\n      if (res.data.auth) {\n        setCurrentUser(res.data.user);\n        setToken(res.data.token);\n        setMessage(\"\");\n      } else {\n        setMessage(res.data.message);\n      }\n    });\n  };\n\n  const setNewToken = newToken => {\n    console.log(\"masuk\");\n\n    if (newToken !== token) {\n      console.log(\"set new token\");\n      setToken(newToken);\n    }\n  };\n\n  const logout = () => {\n    //setToken();\n    console.log(\"current Token : \" + token); //window.location.reload();\n  }; // useEffect(() => {\n  //   setToken(token);\n  // }, [token]);\n\n\n  useEffect(() => {\n    getUser();\n  }, []);\n  const AuthContextValue = {\n    currentUser,\n    message,\n    login,\n    logout,\n    token,\n    setNewToken,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: AuthContextValue,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"vO4t+IY6ePDTzQxpv7RJIxylcEU=\");\n\n_c = AuthProvider;\n\nconst useAuth = () => {\n  _s2();\n\n  return React.useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AuthProvider, useAuth };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/projects/React/login-demo/client/src/AuthContext.js"],"names":["React","createContext","useEffect","useState","axios","createAuthRefreshInterceptor","AuthContext","AuthProvider","children","currentUser","setCurrentUser","message","setMessage","loading","setLoading","token","setToken","isRefreshing","failedQueue","processQueue","error","forEach","prom","reject","resolve","refreshToken","post","then","response","newToken","data","console","log","catch","err","interceptors","use","originalRequest","config","status","_retry","Promise","push","headers","request","tokenRefreshResponse","getUser","get","auth","user","e","login","username","password","res","setNewToken","logout","AuthContextValue","useAuth","useContext"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport axios from \"./axios/config\";\r\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(null);\r\n\r\n  let isRefreshing = false;\r\n  let failedQueue = [];\r\n\r\n  const processQueue = (error, token = null) => {\r\n    failedQueue.forEach((prom) => {\r\n      if (error) {\r\n        prom.reject(error);\r\n      } else {\r\n        prom.resolve(token);\r\n      }\r\n    });\r\n\r\n    failedQueue = [];\r\n  };\r\n\r\n  const refreshToken = () => {\r\n    axios\r\n      .post(\"/refresh_token\")\r\n      .then((response) => {\r\n        const newToken = response.data.token;\r\n        setToken(newToken);\r\n        console.log(`NEW FUCKING TOKEN : ${newToken}`);\r\n        return response;\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n  };\r\n\r\n  axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    async function (error) {\r\n      setLoading(true);\r\n      const originalRequest = error.config;\r\n      console.log(\"ori request \" + error.config);\r\n      console.log(error.response.status);\r\n      if (error.response.status === 401 && !originalRequest._retry) {\r\n        if (isRefreshing) {\r\n          return new Promise(function (resolve, reject) {\r\n            failedQueue.push({ resolve, reject });\r\n          })\r\n            .then((token) => {\r\n              console.log(\"Intercept token: \" + token);\r\n              originalRequest.headers[\"x-access-token\"] = token;\r\n              setLoading(false);\r\n              return axios.request(originalRequest);\r\n            })\r\n            .catch((err) => {\r\n              setLoading(false);\r\n              return Promise.reject(err);\r\n            });\r\n        }\r\n        originalRequest._retry = true;\r\n        isRefreshing = true;\r\n\r\n        return new Promise((resolve, reject) => {\r\n          refreshToken()\r\n            .then((tokenRefreshResponse) => {\r\n              console.log(\"OI\" + tokenRefreshResponse);\r\n              const newToken = tokenRefreshResponse.data.token;\r\n              setToken(newToken);\r\n              console.log(`NEW FUCKING TOKEN : ${newToken}`);\r\n              originalRequest.headers[\"x-access-token\"] = newToken;\r\n              processQueue(null, tokenRefreshResponse.data.token);\r\n              setLoading(false);\r\n              resolve(axios(originalRequest));\r\n            })\r\n            .catch((err) => {\r\n              processQueue(err, null);\r\n              reject(err);\r\n            })\r\n            .then(() => {\r\n              isRefreshing = false;\r\n            });\r\n        });\r\n      }\r\n      setLoading(false);\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  // const refreshAuthLogic = (failedRequest) => {\r\n  //   console.log(\"INTERCEPRTTT\");\r\n  //   return axios\r\n  //     .post(\"http://localhost:5000/api/refresh_token\")\r\n  //     .then((tokenRefreshResponse) => {\r\n  //       setToken(tokenRefreshResponse.data.token);\r\n  //       console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\r\n  //       failedRequest.response.config.headers[\"x-access-token\"] =\r\n  //         tokenRefreshResponse.data.token;\r\n  //       return Promise.resolve();\r\n  //     });\r\n  // };\r\n\r\n  // createAuthRefreshInterceptor(axios, refreshAuthLogic);\r\n\r\n  const getUser = () => {\r\n    console.log(\"call get user1\");\r\n    axios\r\n      .get(\"/userInfo\", {\r\n        headers: { \"x-access-token\": token },\r\n      })\r\n      .then((response) => {\r\n        console.log(\"call get user2\");\r\n        console.log(response);\r\n        if (response.data.auth) {\r\n          setCurrentUser(response.data.user);\r\n          setToken(response.data.token);\r\n        } else {\r\n          if (response.data.message === \"Authentication failed\") {\r\n            //setToken();\r\n          }\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        //setToken();\r\n        //window.location.reload();\r\n      });\r\n  };\r\n\r\n  const login = (username, password) => {\r\n    axios\r\n      .post(\"/login\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        if (res.data.auth) {\r\n          setCurrentUser(res.data.user);\r\n          setToken(res.data.token);\r\n          setMessage(\"\");\r\n        } else {\r\n          setMessage(res.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const setNewToken = (newToken) => {\r\n    console.log(\"masuk\");\r\n    if (newToken !== token) {\r\n      console.log(\"set new token\");\r\n      setToken(newToken);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    //setToken();\r\n    console.log(\"current Token : \" + token);\r\n    //window.location.reload();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setToken(token);\r\n  // }, [token]);\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  const AuthContextValue = {\r\n    currentUser,\r\n    message,\r\n    login,\r\n    logout,\r\n    token,\r\n    setNewToken,\r\n    refreshToken,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={AuthContextValue}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport { AuthProvider, useAuth };\r\n"]},"metadata":{},"sourceType":"module"}