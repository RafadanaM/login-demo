{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\projects\\\\React\\\\login-demo\\\\client\\\\src\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"./axios/config\";\nconst AuthContext = /*#__PURE__*/createContext();\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  let isRefreshing = false;\n  let failedQueue = [];\n\n  const processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n      if (error) {\n        prom.reject(error);\n      } else {\n        prom.resolve(token);\n      }\n    });\n    failedQueue = [];\n  };\n\n  const refreshToken = () => {\n    // return new Promise((resolve, reject) => {\n    axios.post(\"/refresh_token\").then(response => {\n      console.log(response.data); // const newToken = response.data.token;\n      // setToken(newToken);\n      // console.log(`NEW FUCKING TOKEN : ${newToken}`);\n      //resolve(response);\n    }).catch(err => {\n      console.log(err); //reject(err);\n    }); // });\n  }; // axios.interceptors.response.use(\n  //   (response) => {\n  //     return response;\n  //   },\n  //   (error) => {\n  //     const originalRequest = error.config;\n  //     console.log(\"ori request \" + error.config);\n  //     console.log(error.response.status);\n  //     if (error.response.status === 401 && !originalRequest._retry) {\n  //       originalRequest._retry = true;\n  //       isRefreshing = true;\n  //       console.log(\"pre\");\n  //       return refreshToken()\n  //         .then((response) => {\n  //           console.log(\"OI \");\n  //           const newToken = response.data.token;\n  //           setToken(newToken);\n  //           console.log(`NEW TOKEN : ${newToken}`);\n  //           axios.defaults.headers.common[\"x-access-token\"] = newToken;\n  //           //originalRequest.headers[\"x-access-token\"] = newToken;\n  //           return new Promise((resolve, reject) => {\n  //             axios\n  //               .request(originalRequest)\n  //               .then((response) => {\n  //                 resolve(response);\n  //               })\n  //               .catch((error) => {\n  //                 reject(error);\n  //               });\n  //           });\n  //         })\n  //         .catch((err) => {\n  //           console.log(err);\n  //           Promise.reject(err);\n  //         });\n  //       // return new Promise((resolve, reject) => {\n  //       //   refreshToken()\n  //       //     .then((tokenRefreshResponse) => {\n  //       //       console.log(\"OI\" + tokenRefreshResponse);\n  //       //       const newToken = tokenRefreshResponse.data.token;\n  //       //       setToken(newToken);\n  //       //       console.log(`NEW FUCKING TOKEN : ${newToken}`);\n  //       //       originalRequest.headers[\"x-access-token\"] = newToken;\n  //       //       processQueue(null, tokenRefreshResponse.data.token);\n  //       //       setLoading(false);\n  //       //       resolve(axios(originalRequest));\n  //       //     })\n  //       //     .catch((err) => {\n  //       //       processQueue(err, null);\n  //       //       reject(err);\n  //       //     })\n  //       //     .then(() => {\n  //       //       isRefreshing = false;\n  //       //     });\n  //       // });\n  //     }\n  //     console.log(\"masuk false\");\n  //     return Promise.reject(error);\n  //   }\n  // );\n  // const refreshAuthLogic = (failedRequest) => {\n  //   console.log(\"INTERCEPRTTT\");\n  //   return axios\n  //     .post(\"http://localhost:5000/api/refresh_token\")\n  //     .then((tokenRefreshResponse) => {\n  //       setToken(tokenRefreshResponse.data.token);\n  //       console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\n  //       failedRequest.response.config.headers[\"x-access-token\"] =\n  //         tokenRefreshResponse.data.token;\n  //       return Promise.resolve();\n  //     });\n  // };\n  // createAuthRefreshInterceptor(axios, refreshAuthLogic);\n\n\n  const getUser = () => {\n    axios.get(\"/userInfo\").then(({\n      data\n    }) => {\n      console.log(data);\n      setCurrentUser(data.user);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setLoading(false);\n    });\n  };\n\n  const login = (username, password) => {\n    axios.post(\"/login\", {\n      username: username,\n      password: password\n    }).then(res => {\n      console.log(res.data);\n\n      if (res.data.auth) {\n        setCurrentUser(res.data.user);\n        setMessage(\"\");\n      } else {\n        setMessage(res.data.message);\n      }\n    });\n  };\n\n  const logout = () => {};\n\n  useEffect(() => {\n    getUser();\n  }, []);\n  const AuthContextValue = {\n    currentUser,\n    message,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: AuthContextValue,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"DGDZn+5+w2SkvDfyuk3vgXKPYPg=\");\n\n_c = AuthProvider;\n\nconst useAuth = () => {\n  _s2();\n\n  return React.useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AuthProvider, useAuth };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/projects/React/login-demo/client/src/AuthContext.js"],"names":["React","createContext","useEffect","useState","axios","AuthContext","AuthProvider","children","currentUser","setCurrentUser","message","setMessage","loading","setLoading","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","refreshToken","post","then","response","console","log","data","catch","err","getUser","get","user","e","login","username","password","res","auth","logout","AuthContextValue","useAuth","useContext"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport axios from \"./axios/config\";\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  let isRefreshing = false;\r\n  let failedQueue = [];\r\n\r\n  const processQueue = (error, token = null) => {\r\n    failedQueue.forEach((prom) => {\r\n      if (error) {\r\n        prom.reject(error);\r\n      } else {\r\n        prom.resolve(token);\r\n      }\r\n    });\r\n\r\n    failedQueue = [];\r\n  };\r\n\r\n  const refreshToken = () => {\r\n    // return new Promise((resolve, reject) => {\r\n    axios\r\n      .post(\"/refresh_token\")\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        // const newToken = response.data.token;\r\n        // setToken(newToken);\r\n        // console.log(`NEW FUCKING TOKEN : ${newToken}`);\r\n        //resolve(response);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        //reject(err);\r\n      });\r\n    // });\r\n  };\r\n\r\n  // axios.interceptors.response.use(\r\n  //   (response) => {\r\n  //     return response;\r\n  //   },\r\n  //   (error) => {\r\n  //     const originalRequest = error.config;\r\n  //     console.log(\"ori request \" + error.config);\r\n  //     console.log(error.response.status);\r\n  //     if (error.response.status === 401 && !originalRequest._retry) {\r\n  //       originalRequest._retry = true;\r\n  //       isRefreshing = true;\r\n  //       console.log(\"pre\");\r\n  //       return refreshToken()\r\n  //         .then((response) => {\r\n  //           console.log(\"OI \");\r\n  //           const newToken = response.data.token;\r\n  //           setToken(newToken);\r\n  //           console.log(`NEW TOKEN : ${newToken}`);\r\n  //           axios.defaults.headers.common[\"x-access-token\"] = newToken;\r\n  //           //originalRequest.headers[\"x-access-token\"] = newToken;\r\n  //           return new Promise((resolve, reject) => {\r\n  //             axios\r\n  //               .request(originalRequest)\r\n  //               .then((response) => {\r\n  //                 resolve(response);\r\n  //               })\r\n  //               .catch((error) => {\r\n  //                 reject(error);\r\n  //               });\r\n  //           });\r\n  //         })\r\n  //         .catch((err) => {\r\n  //           console.log(err);\r\n  //           Promise.reject(err);\r\n  //         });\r\n\r\n  //       // return new Promise((resolve, reject) => {\r\n  //       //   refreshToken()\r\n  //       //     .then((tokenRefreshResponse) => {\r\n  //       //       console.log(\"OI\" + tokenRefreshResponse);\r\n  //       //       const newToken = tokenRefreshResponse.data.token;\r\n  //       //       setToken(newToken);\r\n  //       //       console.log(`NEW FUCKING TOKEN : ${newToken}`);\r\n  //       //       originalRequest.headers[\"x-access-token\"] = newToken;\r\n  //       //       processQueue(null, tokenRefreshResponse.data.token);\r\n  //       //       setLoading(false);\r\n  //       //       resolve(axios(originalRequest));\r\n  //       //     })\r\n  //       //     .catch((err) => {\r\n  //       //       processQueue(err, null);\r\n  //       //       reject(err);\r\n  //       //     })\r\n  //       //     .then(() => {\r\n  //       //       isRefreshing = false;\r\n  //       //     });\r\n  //       // });\r\n  //     }\r\n  //     console.log(\"masuk false\");\r\n  //     return Promise.reject(error);\r\n  //   }\r\n  // );\r\n\r\n  // const refreshAuthLogic = (failedRequest) => {\r\n  //   console.log(\"INTERCEPRTTT\");\r\n  //   return axios\r\n  //     .post(\"http://localhost:5000/api/refresh_token\")\r\n  //     .then((tokenRefreshResponse) => {\r\n  //       setToken(tokenRefreshResponse.data.token);\r\n  //       console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\r\n  //       failedRequest.response.config.headers[\"x-access-token\"] =\r\n  //         tokenRefreshResponse.data.token;\r\n  //       return Promise.resolve();\r\n  //     });\r\n  // };\r\n\r\n  // createAuthRefreshInterceptor(axios, refreshAuthLogic);\r\n\r\n  const getUser = () => {\r\n    axios\r\n      .get(\"/userInfo\")\r\n      .then(({ data }) => {\r\n        console.log(data);\r\n        setCurrentUser(data.user);\r\n        setLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const login = (username, password) => {\r\n    axios\r\n      .post(\"/login\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        if (res.data.auth) {\r\n          setCurrentUser(res.data.user);\r\n          setMessage(\"\");\r\n        } else {\r\n          setMessage(res.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const logout = () => {};\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  const AuthContextValue = {\r\n    currentUser,\r\n    message,\r\n    login,\r\n    logout,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={AuthContextValue}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport { AuthProvider, useAuth };\r\n"]},"metadata":{},"sourceType":"module"}