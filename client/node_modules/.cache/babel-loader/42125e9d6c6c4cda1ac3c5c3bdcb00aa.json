{"ast":null,"code":"import axios from \"axios\";\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\nimport { useAuth } from \"../AuthContext\";\nconst {\n  token,\n  setNewToken\n} = useAuth();\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\nconst instance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  responseType: \"json\",\n  withCredentials: true\n});\ninstance.interceptors.response.use(error => {\n  const originalRequest = error.config;\n  console.log(error);\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    if (isRefreshing) {\n      return new Promise(function (resolve, reject) {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      }).then(token => {\n        console.log(\"Intercept token: \" + token);\n        originalRequest.headers[\"x-access-token\"] = token;\n        return _axios.request(originalRequest);\n      }).catch(err => {\n        return Promise.reject(err);\n      });\n    }\n\n    originalRequest._retry = true;\n    isRefreshing = true; // const refreshToken =\n    //   window.localStorage.getItem(\"refreshToken\") || \"refresh123xyz\";\n\n    return new Promise((resolve, reject) => {\n      // window.api.auth\n      //   .refresh(refreshToken)\n      //   .then(({ data }) => {\n      //     window.localStorage.setItem(\"token\", data.token);\n      //     window.localStorage.setItem(\"refreshToken\", data.refreshToken);\n      //     _axios.defaults.headers.common[\"Authorization\"] =\n      //       \"Bearer \" + data.token;\n      //     originalRequest.headers[\"Authorization\"] = \"Bearer \" + data.token;\n      //     processQueue(null, data.token);\n      //     resolve(_axios(originalRequest));\n      //   })\n      //   .catch((err) => {\n      //     processQueue(err, null);\n      //     reject(err);\n      //   })\n      //   .then(() => {\n      //     isRefreshing = false;\n      //   });\n      instance.post(\"/refresh_token\").then(tokenRefreshResponse => {\n        setToken(tokenRefreshResponse.data.token);\n        console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\n        originalRequest.headers[\"x-access-token\"] = tokenRefreshResponse.data.token;\n        processQueue(null, tokenRefreshResponse.data.token);\n        resolve();\n      }).catch(err => {\n        processQueue(err, null);\n        reject(err);\n      }).then(() => {\n        isRefreshing = false;\n      });\n    });\n  }\n\n  return Promise.reject(error);\n}); // instance.interceptors.response.use(undefined, function (error) {\n//   alert(error.toString());\n//   return Promise.reject(error);\n// });\n// instance.interceptors.response.use(undefined, authInterceptor(apiClient));\n// const refreshAuthLogic = (failedRequest) =>\n//   instance\n//     .post(\"refresh_token\")\n//     .then((tokenRefreshResponse) => {\n//       localStorage.setItem(\"accessToken\", tokenRefreshResponse.data.access);\n//       failedRequest.response.config.headers[\"Authorization\"] =\n//         \"Bearer \" + tokenRefreshResponse.data.access;\n//       return Promise.resolve();\n//     })\n//     .catch((error) => {\n//       console.log(\"refresh fail\");\n//       localStorage.setItem(\"accessToken\", null);\n//       localStorage.setItem(\"refreshToken\", null);\n//       //pushToLogin();\n//       return Promise.reject(error);\n//     });\n// createAuthRefreshInterceptor(instance, refreshAuthLogic);\n\nexport default instance;","map":{"version":3,"sources":["D:/projects/React/login-demo/client/src/axios/config.js"],"names":["axios","createAuthRefreshInterceptor","useAuth","token","setNewToken","isRefreshing","failedQueue","processQueue","error","forEach","prom","reject","resolve","instance","create","baseURL","headers","responseType","withCredentials","interceptors","response","use","originalRequest","config","console","log","status","_retry","Promise","push","then","_axios","request","catch","err","post","tokenRefreshResponse","setToken","data"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\r\nimport { useAuth } from \"../AuthContext\";\r\n\r\nconst { token, setNewToken } = useAuth();\r\nlet isRefreshing = false;\r\nlet failedQueue = [];\r\n\r\nconst processQueue = (error, token = null) => {\r\n  failedQueue.forEach((prom) => {\r\n    if (error) {\r\n      prom.reject(error);\r\n    } else {\r\n      prom.resolve(token);\r\n    }\r\n  });\r\n\r\n  failedQueue = [];\r\n};\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  responseType: \"json\",\r\n  withCredentials: true,\r\n});\r\n\r\ninstance.interceptors.response.use((error) => {\r\n  const originalRequest = error.config;\r\n  console.log(error);\r\n  if (error.response.status === 401 && !originalRequest._retry) {\r\n    if (isRefreshing) {\r\n      return new Promise(function (resolve, reject) {\r\n        failedQueue.push({ resolve, reject });\r\n      })\r\n        .then((token) => {\r\n          console.log(\"Intercept token: \" + token);\r\n          originalRequest.headers[\"x-access-token\"] = token;\r\n          return _axios.request(originalRequest);\r\n        })\r\n        .catch((err) => {\r\n          return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    originalRequest._retry = true;\r\n    isRefreshing = true;\r\n\r\n    // const refreshToken =\r\n    //   window.localStorage.getItem(\"refreshToken\") || \"refresh123xyz\";\r\n    return new Promise((resolve, reject) => {\r\n      // window.api.auth\r\n      //   .refresh(refreshToken)\r\n      //   .then(({ data }) => {\r\n      //     window.localStorage.setItem(\"token\", data.token);\r\n      //     window.localStorage.setItem(\"refreshToken\", data.refreshToken);\r\n      //     _axios.defaults.headers.common[\"Authorization\"] =\r\n      //       \"Bearer \" + data.token;\r\n      //     originalRequest.headers[\"Authorization\"] = \"Bearer \" + data.token;\r\n      //     processQueue(null, data.token);\r\n      //     resolve(_axios(originalRequest));\r\n      //   })\r\n      //   .catch((err) => {\r\n      //     processQueue(err, null);\r\n      //     reject(err);\r\n      //   })\r\n      //   .then(() => {\r\n      //     isRefreshing = false;\r\n      //   });\r\n      instance\r\n        .post(\"/refresh_token\")\r\n        .then((tokenRefreshResponse) => {\r\n          setToken(tokenRefreshResponse.data.token);\r\n          console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\r\n          originalRequest.headers[\"x-access-token\"] =\r\n            tokenRefreshResponse.data.token;\r\n          processQueue(null, tokenRefreshResponse.data.token);\r\n          resolve();\r\n        })\r\n        .catch((err) => {\r\n          processQueue(err, null);\r\n          reject(err);\r\n        })\r\n        .then(() => {\r\n          isRefreshing = false;\r\n        });\r\n    });\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\n// instance.interceptors.response.use(undefined, function (error) {\r\n//   alert(error.toString());\r\n//   return Promise.reject(error);\r\n// });\r\n\r\n// instance.interceptors.response.use(undefined, authInterceptor(apiClient));\r\n\r\n// const refreshAuthLogic = (failedRequest) =>\r\n//   instance\r\n//     .post(\"refresh_token\")\r\n//     .then((tokenRefreshResponse) => {\r\n//       localStorage.setItem(\"accessToken\", tokenRefreshResponse.data.access);\r\n//       failedRequest.response.config.headers[\"Authorization\"] =\r\n//         \"Bearer \" + tokenRefreshResponse.data.access;\r\n//       return Promise.resolve();\r\n//     })\r\n//     .catch((error) => {\r\n//       console.log(\"refresh fail\");\r\n//       localStorage.setItem(\"accessToken\", null);\r\n//       localStorage.setItem(\"refreshToken\", null);\r\n//       //pushToLogin();\r\n//       return Promise.reject(error);\r\n//     });\r\n// createAuthRefreshInterceptor(instance, refreshAuthLogic);\r\n\r\nexport default instance;\r\n"]},"metadata":{},"sourceType":"module"}