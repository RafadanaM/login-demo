{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\projects\\\\React\\\\login-demo\\\\client\\\\src\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nAxios.defaults.withCredentials = true;\nconst AuthContext = /*#__PURE__*/createContext();\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n  Axios.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    return new Promise(resolve => {\n      const originalRequest = error.config;\n      const refreshToken = localStorage.get(\"refresh_token\");\n\n      if (error.response && error.response.status === 401 && error.config && !error.config.__isRetryRequest) {\n        originalRequest._retry = true;\n        const response = fetch(api.refreshToken, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            refresh: refreshToken\n          })\n        }).then(res => res.json()).then(res => {\n          localStorage.set(res.access, \"token\");\n          return axios(originalRequest);\n        });\n        resolve(response);\n      }\n\n      return Promise.reject(error);\n    });\n  });\n\n  const getUser = () => {\n    Axios.get(\"http://localhost:5000/api/userInfo\", {\n      headers: {\n        \"x-access-token\": token\n      }\n    }).then(response => {\n      if (response.data.auth) {\n        setCurrentUser(response.data.user);\n      } else {\n        if (response.data.message === \"Authentication failed\") {\n          setToken();\n        }\n      }\n\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setToken();\n      window.location.reload();\n    });\n  };\n\n  const login = (username, password) => {\n    Axios.post(\"http://localhost:5000/api/login\", {\n      username: username,\n      password: password\n    }).then(res => {\n      console.log(res.data);\n\n      if (res.data.auth) {\n        setCurrentUser(res.data.user);\n        setToken(res.data.token);\n        setMessage(\"\");\n      } else {\n        setMessage(res.data.message);\n      }\n    });\n  };\n\n  const logout = () => {\n    setToken();\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    getUser();\n  }, []);\n  const AuthContextValue = {\n    currentUser,\n    message,\n    login,\n    logout,\n    token\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: AuthContextValue,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"vO4t+IY6ePDTzQxpv7RJIxylcEU=\");\n\n_c = AuthProvider;\n\nconst useAuth = () => {\n  _s2();\n\n  return React.useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AuthProvider, useAuth };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/projects/React/login-demo/client/src/AuthContext.js"],"names":["React","createContext","useEffect","useState","Axios","defaults","withCredentials","AuthContext","AuthProvider","children","currentUser","setCurrentUser","message","setMessage","loading","setLoading","token","setToken","interceptors","response","use","error","Promise","resolve","originalRequest","config","refreshToken","localStorage","get","status","__isRetryRequest","_retry","fetch","api","method","headers","body","JSON","stringify","refresh","then","res","json","set","access","axios","reject","getUser","data","auth","user","catch","e","console","log","window","location","reload","login","username","password","post","logout","AuthContextValue","useAuth","useContext"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\nAxios.defaults.withCredentials = true;\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(null);\r\n\r\n  Axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    (error) => {\r\n      return new Promise((resolve) => {\r\n        const originalRequest = error.config;\r\n        const refreshToken = localStorage.get(\"refresh_token\");\r\n        if (\r\n          error.response &&\r\n          error.response.status === 401 &&\r\n          error.config &&\r\n          !error.config.__isRetryRequest\r\n        ) {\r\n          originalRequest._retry = true;\r\n\r\n          const response = fetch(api.refreshToken, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              refresh: refreshToken,\r\n            }),\r\n          })\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n              localStorage.set(res.access, \"token\");\r\n\r\n              return axios(originalRequest);\r\n            });\r\n          resolve(response);\r\n        }\r\n\r\n        return Promise.reject(error);\r\n      });\r\n    }\r\n  );\r\n\r\n  const getUser = () => {\r\n    Axios.get(\"http://localhost:5000/api/userInfo\", {\r\n      headers: { \"x-access-token\": token },\r\n    })\r\n      .then((response) => {\r\n        if (response.data.auth) {\r\n          setCurrentUser(response.data.user);\r\n        } else {\r\n          if (response.data.message === \"Authentication failed\") {\r\n            setToken();\r\n          }\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setToken();\r\n        window.location.reload();\r\n      });\r\n  };\r\n\r\n  const login = (username, password) => {\r\n    Axios.post(\"http://localhost:5000/api/login\", {\r\n      username: username,\r\n      password: password,\r\n    }).then((res) => {\r\n      console.log(res.data);\r\n      if (res.data.auth) {\r\n        setCurrentUser(res.data.user);\r\n        setToken(res.data.token);\r\n        setMessage(\"\");\r\n      } else {\r\n        setMessage(res.data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken();\r\n    window.location.reload();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  const AuthContextValue = {\r\n    currentUser,\r\n    message,\r\n    login,\r\n    logout,\r\n    token,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={AuthContextValue}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport { AuthProvider, useAuth };\r\n"]},"metadata":{},"sourceType":"module"}