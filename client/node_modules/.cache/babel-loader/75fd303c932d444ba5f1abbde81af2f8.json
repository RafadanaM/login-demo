{"ast":null,"code":"import axios from \"axios\";\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\"; //import { useAuth } from \"../AuthContext\";\n//const { token, setNewToken } = useAuth();\n\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\nconst instance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  responseType: \"json\",\n  withCredentials: true\n}); // instance.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   async function (error) {\n//     const originalRequest = error.config;\n//     if (error.response.status === 403 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       //const access_token = await refreshAccessToken();\n//       //axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\n//       return instance(originalRequest);\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n// instance.interceptors.response.use(undefined, function (error) {\n//   alert(error.toString());\n//   return Promise.reject(error);\n// });\n// instance.interceptors.response.use(undefined, authInterceptor(apiClient));\n// const refreshAuthLogic = (failedRequest) =>\n//   instance\n//     .post(\"refresh_token\")\n//     .then((tokenRefreshResponse) => {\n//       localStorage.setItem(\"accessToken\", tokenRefreshResponse.data.access);\n//       failedRequest.response.config.headers[\"Authorization\"] =\n//         \"Bearer \" + tokenRefreshResponse.data.access;\n//       return Promise.resolve();\n//     })\n//     .catch((error) => {\n//       console.log(\"refresh fail\");\n//       localStorage.setItem(\"accessToken\", null);\n//       localStorage.setItem(\"refreshToken\", null);\n//       //pushToLogin();\n//       return Promise.reject(error);\n//     });\n// createAuthRefreshInterceptor(instance, refreshAuthLogic);\n\nexport default instance;","map":{"version":3,"sources":["D:/projects/React/login-demo/client/src/axios/config.js"],"names":["axios","createAuthRefreshInterceptor","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","instance","create","baseURL","headers","responseType","withCredentials"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,4BAAP,MAAyC,oBAAzC,C,CACA;AAEA;;AACA,IAAIC,YAAY,GAAG,KAAnB;AACA,IAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAK,GAAG,IAAhB,KAAyB;AAC5CH,EAAAA,WAAW,CAACI,OAAZ,CAAqBC,IAAD,IAAU;AAC5B,QAAIH,KAAJ,EAAW;AACTG,MAAAA,IAAI,CAACC,MAAL,CAAYJ,KAAZ;AACD,KAFD,MAEO;AACLG,MAAAA,IAAI,CAACE,OAAL,CAAaJ,KAAb;AACD;AACF,GAND;AAQAH,EAAAA,WAAW,GAAG,EAAd;AACD,CAVD;;AAYA,MAAMQ,QAAQ,GAAGX,KAAK,CAACY,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,2BADmB;AAE5BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFmB;AAK5BC,EAAAA,YAAY,EAAE,MALc;AAM5BC,EAAAA,eAAe,EAAE;AANW,CAAb,CAAjB,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeL,QAAf","sourcesContent":["import axios from \"axios\";\r\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\r\n//import { useAuth } from \"../AuthContext\";\r\n\r\n//const { token, setNewToken } = useAuth();\r\nlet isRefreshing = false;\r\nlet failedQueue = [];\r\n\r\nconst processQueue = (error, token = null) => {\r\n  failedQueue.forEach((prom) => {\r\n    if (error) {\r\n      prom.reject(error);\r\n    } else {\r\n      prom.resolve(token);\r\n    }\r\n  });\r\n\r\n  failedQueue = [];\r\n};\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  responseType: \"json\",\r\n  withCredentials: true,\r\n});\r\n\r\n// instance.interceptors.response.use(\r\n//   (response) => {\r\n//     return response;\r\n//   },\r\n//   async function (error) {\r\n//     const originalRequest = error.config;\r\n//     if (error.response.status === 403 && !originalRequest._retry) {\r\n//       originalRequest._retry = true;\r\n//       //const access_token = await refreshAccessToken();\r\n//       //axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\r\n//       return instance(originalRequest);\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// instance.interceptors.response.use(undefined, function (error) {\r\n//   alert(error.toString());\r\n//   return Promise.reject(error);\r\n// });\r\n\r\n// instance.interceptors.response.use(undefined, authInterceptor(apiClient));\r\n\r\n// const refreshAuthLogic = (failedRequest) =>\r\n//   instance\r\n//     .post(\"refresh_token\")\r\n//     .then((tokenRefreshResponse) => {\r\n//       localStorage.setItem(\"accessToken\", tokenRefreshResponse.data.access);\r\n//       failedRequest.response.config.headers[\"Authorization\"] =\r\n//         \"Bearer \" + tokenRefreshResponse.data.access;\r\n//       return Promise.resolve();\r\n//     })\r\n//     .catch((error) => {\r\n//       console.log(\"refresh fail\");\r\n//       localStorage.setItem(\"accessToken\", null);\r\n//       localStorage.setItem(\"refreshToken\", null);\r\n//       //pushToLogin();\r\n//       return Promise.reject(error);\r\n//     });\r\n// createAuthRefreshInterceptor(instance, refreshAuthLogic);\r\n\r\nexport default instance;\r\n"]},"metadata":{},"sourceType":"module"}