{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\projects\\\\React\\\\login-demo\\\\client\\\\src\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"./axios/config\";\nconst AuthContext = /*#__PURE__*/createContext();\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n  let isRefreshing = false;\n  let failedQueue = [];\n\n  const processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n      if (error) {\n        prom.reject(error);\n      } else {\n        prom.resolve(token);\n      }\n    });\n    failedQueue = [];\n  };\n\n  const refreshToken = () => {\n    return new Promise((resolve, reject) => {\n      axios.post(\"/refresh_token\").then(response => {\n        console.log(response.data); // const newToken = response.data.token;\n        // setToken(newToken);\n        // console.log(`NEW FUCKING TOKEN : ${newToken}`);\n\n        resolve(response);\n      }).catch(err => {\n        console.log(err);\n        reject(err);\n      });\n    });\n  };\n\n  axios.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    const originalRequest = error.config;\n    console.log(\"ori request \" + error.config);\n    console.log(error.response.status);\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      isRefreshing = true;\n      console.log(\"pre\");\n      return refreshToken().then(response => {\n        console.log(\"OI \");\n        const newToken = response.data.token;\n        setToken(newToken);\n        console.log(`NEW TOKEN : ${newToken}`);\n        axios.defaults.headers.common[\"x-access-token\"] = newToken; //originalRequest.headers[\"x-access-token\"] = newToken;\n\n        return new Promise((resolve, reject) => {\n          axios.request(originalRequest).then(response => {\n            resolve(response);\n          }).catch(error => {\n            reject(error);\n          });\n        });\n      }).catch(err => {\n        console.log(err);\n        Promise.reject(err);\n      }); // return new Promise((resolve, reject) => {\n      //   refreshToken()\n      //     .then((tokenRefreshResponse) => {\n      //       console.log(\"OI\" + tokenRefreshResponse);\n      //       const newToken = tokenRefreshResponse.data.token;\n      //       setToken(newToken);\n      //       console.log(`NEW FUCKING TOKEN : ${newToken}`);\n      //       originalRequest.headers[\"x-access-token\"] = newToken;\n      //       processQueue(null, tokenRefreshResponse.data.token);\n      //       setLoading(false);\n      //       resolve(axios(originalRequest));\n      //     })\n      //     .catch((err) => {\n      //       processQueue(err, null);\n      //       reject(err);\n      //     })\n      //     .then(() => {\n      //       isRefreshing = false;\n      //     });\n      // });\n    }\n\n    console.log(\"masuk false\");\n    return Promise.reject(error);\n  }); // const refreshAuthLogic = (failedRequest) => {\n  //   console.log(\"INTERCEPRTTT\");\n  //   return axios\n  //     .post(\"http://localhost:5000/api/refresh_token\")\n  //     .then((tokenRefreshResponse) => {\n  //       setToken(tokenRefreshResponse.data.token);\n  //       console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\n  //       failedRequest.response.config.headers[\"x-access-token\"] =\n  //         tokenRefreshResponse.data.token;\n  //       return Promise.resolve();\n  //     });\n  // };\n  // createAuthRefreshInterceptor(axios, refreshAuthLogic);\n\n  const getUser = () => {\n    console.log(\"call get user1\");\n    axios.get(\"/userInfo\").then(response => {\n      console.log(\"call get user2\");\n      console.log(response);\n\n      if (response.data.auth) {\n        setCurrentUser(response.data.user);\n      } else {\n        if (response.data.message === \"Authentication failed\") {//setToken();\n        }\n      }\n\n      setLoading(false);\n    }).catch(e => {\n      console.log(e); //setToken();\n      //window.location.reload();\n    });\n  };\n\n  const login = (username, password) => {\n    axios.post(\"/login\", {\n      username: username,\n      password: password\n    }).then(res => {\n      console.log(res.data);\n\n      if (res.data.auth) {\n        setCurrentUser(res.data.user);\n        setToken(res.data.token);\n        setMessage(\"\");\n      } else {\n        setMessage(res.data.message);\n      }\n    });\n  };\n\n  const setNewToken = newToken => {\n    console.log(\"masuk\");\n\n    if (newToken !== token) {\n      console.log(\"set new token\");\n      setToken(newToken);\n    }\n  };\n\n  const logout = () => {\n    //setToken();\n    console.log(\"current Token : \" + token); //window.location.reload();\n  }; // useEffect(() => {\n  //   setToken(token);\n  // }, [token]);\n\n\n  useEffect(() => {\n    getUser();\n  }, []);\n  const AuthContextValue = {\n    currentUser,\n    message,\n    login,\n    logout,\n    token,\n    setNewToken,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: AuthContextValue,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"vO4t+IY6ePDTzQxpv7RJIxylcEU=\");\n\n_c = AuthProvider;\n\nconst useAuth = () => {\n  _s2();\n\n  return React.useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AuthProvider, useAuth };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/projects/React/login-demo/client/src/AuthContext.js"],"names":["React","createContext","useEffect","useState","axios","AuthContext","AuthProvider","children","currentUser","setCurrentUser","message","setMessage","loading","setLoading","token","setToken","isRefreshing","failedQueue","processQueue","error","forEach","prom","reject","resolve","refreshToken","Promise","post","then","response","console","log","data","catch","err","interceptors","use","originalRequest","config","status","_retry","newToken","defaults","headers","common","request","getUser","get","auth","user","e","login","username","password","res","setNewToken","logout","AuthContextValue","useAuth","useContext"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport axios from \"./axios/config\";\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(null);\r\n\r\n  let isRefreshing = false;\r\n  let failedQueue = [];\r\n\r\n  const processQueue = (error, token = null) => {\r\n    failedQueue.forEach((prom) => {\r\n      if (error) {\r\n        prom.reject(error);\r\n      } else {\r\n        prom.resolve(token);\r\n      }\r\n    });\r\n\r\n    failedQueue = [];\r\n  };\r\n\r\n  const refreshToken = () => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .post(\"/refresh_token\")\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          // const newToken = response.data.token;\r\n          // setToken(newToken);\r\n          // console.log(`NEW FUCKING TOKEN : ${newToken}`);\r\n          resolve(response);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          reject(err);\r\n        });\r\n    });\r\n  };\r\n\r\n  axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    (error) => {\r\n      const originalRequest = error.config;\r\n      console.log(\"ori request \" + error.config);\r\n      console.log(error.response.status);\r\n      if (error.response.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        isRefreshing = true;\r\n        console.log(\"pre\");\r\n        return refreshToken()\r\n          .then((response) => {\r\n            console.log(\"OI \");\r\n            const newToken = response.data.token;\r\n            setToken(newToken);\r\n            console.log(`NEW TOKEN : ${newToken}`);\r\n            axios.defaults.headers.common[\"x-access-token\"] = newToken;\r\n            //originalRequest.headers[\"x-access-token\"] = newToken;\r\n            return new Promise((resolve, reject) => {\r\n              axios\r\n                .request(originalRequest)\r\n                .then((response) => {\r\n                  resolve(response);\r\n                })\r\n                .catch((error) => {\r\n                  reject(error);\r\n                });\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            Promise.reject(err);\r\n          });\r\n\r\n        // return new Promise((resolve, reject) => {\r\n        //   refreshToken()\r\n        //     .then((tokenRefreshResponse) => {\r\n        //       console.log(\"OI\" + tokenRefreshResponse);\r\n        //       const newToken = tokenRefreshResponse.data.token;\r\n        //       setToken(newToken);\r\n        //       console.log(`NEW FUCKING TOKEN : ${newToken}`);\r\n        //       originalRequest.headers[\"x-access-token\"] = newToken;\r\n        //       processQueue(null, tokenRefreshResponse.data.token);\r\n        //       setLoading(false);\r\n        //       resolve(axios(originalRequest));\r\n        //     })\r\n        //     .catch((err) => {\r\n        //       processQueue(err, null);\r\n        //       reject(err);\r\n        //     })\r\n        //     .then(() => {\r\n        //       isRefreshing = false;\r\n        //     });\r\n        // });\r\n      }\r\n      console.log(\"masuk false\");\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  // const refreshAuthLogic = (failedRequest) => {\r\n  //   console.log(\"INTERCEPRTTT\");\r\n  //   return axios\r\n  //     .post(\"http://localhost:5000/api/refresh_token\")\r\n  //     .then((tokenRefreshResponse) => {\r\n  //       setToken(tokenRefreshResponse.data.token);\r\n  //       console.log(`NEW FUCKING TOKEN : ${tokenRefreshResponse.data.token}`);\r\n  //       failedRequest.response.config.headers[\"x-access-token\"] =\r\n  //         tokenRefreshResponse.data.token;\r\n  //       return Promise.resolve();\r\n  //     });\r\n  // };\r\n\r\n  // createAuthRefreshInterceptor(axios, refreshAuthLogic);\r\n\r\n  const getUser = () => {\r\n    console.log(\"call get user1\");\r\n    axios\r\n      .get(\"/userInfo\")\r\n      .then((response) => {\r\n        console.log(\"call get user2\");\r\n        console.log(response);\r\n        if (response.data.auth) {\r\n          setCurrentUser(response.data.user);\r\n        } else {\r\n          if (response.data.message === \"Authentication failed\") {\r\n            //setToken();\r\n          }\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        //setToken();\r\n        //window.location.reload();\r\n      });\r\n  };\r\n\r\n  const login = (username, password) => {\r\n    axios\r\n      .post(\"/login\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        if (res.data.auth) {\r\n          setCurrentUser(res.data.user);\r\n          setToken(res.data.token);\r\n          setMessage(\"\");\r\n        } else {\r\n          setMessage(res.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const setNewToken = (newToken) => {\r\n    console.log(\"masuk\");\r\n    if (newToken !== token) {\r\n      console.log(\"set new token\");\r\n      setToken(newToken);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    //setToken();\r\n    console.log(\"current Token : \" + token);\r\n    //window.location.reload();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setToken(token);\r\n  // }, [token]);\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  const AuthContextValue = {\r\n    currentUser,\r\n    message,\r\n    login,\r\n    logout,\r\n    token,\r\n    setNewToken,\r\n    refreshToken,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={AuthContextValue}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => React.useContext(AuthContext);\r\n\r\nexport { AuthProvider, useAuth };\r\n"]},"metadata":{},"sourceType":"module"}